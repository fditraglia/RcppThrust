library(RcppThrust)
library(RcppThrust)
demo("sort")
library(RcppThrust)
library(RcppThrust)
install.packages("Rcpp")
install.packages("Rcpp")
library(RcppThrust)
library(RcppThrust)
demo("sort")
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
demo("sort")
library(RcppThrust)
library(RcppThrust)
devtools::test
devtools::test()
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
print(z)
expect_equal(y, z)
library("testthat")
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
print(z)
expect_equal(y, z)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
q()
library(RcppThrust)
library(RcppThrust)
install.packages("RcppArmadiilo")
install.packages("RcppArmadillo")
library(RcppThrust)
library(RcppThrust)
demo("sort")
library(RcppThrust)
library(RcppThrust)
demo("sort")
thrust::transform(keys.begin(), keys.end(), keys.begin(), thrust::negate<double>());
library(RcppThrust)
demo("sort")
x
myfunctor(x)
library(RcppThrust)
compileAttributes()
library(RcppThrust)
myfunctor(x)
library(RcppThrust)
myfunctor(x)
library(RcppThrust)
myfunctor(x)
library(RcppThrust)
myfunctor(x)
compileAttributes()
library(RcppThrust)
demo("sort")
library(RcppThrust)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(-x, z)
z = myfunctor(x)
library(RcppThrust)
library(RcppThrust)
library("testthat")
z = myfunctor(x)
z
z = myfunctor(x)
z
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y, -z)
library(RcppThrust)
library(RcppThrust)
demo("sort")
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y, -z)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
z
y
expect_equal(y, -z)
y
y[1:10]
z[1:10]
-z[1:10]
expect_equal(y, -z)
library(RcppThrust)
z = myfunctor(x)
z
expect_equal(y, -z)
library(RcppThrust)
z = myfunctor(x)
z
x
- sort(x) * 0.5 + 1
z
expect_equal(- sort(x) * 0.5 + 1, z)
library(RcppThrust)
expect_equal(- sort(x) * 0.5 + 1, z)
expect_equal(- sort(x) * 0.5 + 1, simple_negate(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
library(RcppThrust)
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
library(RcppThrust)
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
library(RcppThrust)
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
expect_equal(- sort(x) * 0.5 + 1, myfunctor(x))
install.packages("RcppParallel.h")
install.packages("RcppParallel")
library(RcppThrust)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y, -z)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y, -z)
library(RcppThrust)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y, -z)
library(RcppThrust)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y + 1.4, -z)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y - 1.4, -z)
library(RcppThrust)
library(RcppThrust)
devtools::load_all(".")
library(RcppThrust)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y, -z)
library(RcppThrust)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y, -z)
# test_RcppThrust.R
set.seed(1234)
x = sample(1:1e4, 1e3)
y = sort(x)
z = mysort(x)
expect_equal(y, z)
z = myfunctor(x)
expect_equal(y, -z)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
library(RcppThrust)
install.packages("Rcpp")
